<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserAdminType;
use App\Form\UserType;
use App\Repository\UserRepository;
use App\Services\FileUpLoader;
use App\Technical\Alert;
use App\Technical\Messages;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

/**
 * @Route("/user")
 */
class UserController extends AbstractController
{
    private $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    /**
     * @Route("/", name="user_index", methods={"GET"})
     */
    public function index(UserRepository $userRepository): Response
    {
        return $this->render('user/manage.html.twig', [
            'users' => $userRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="user_new", methods={"GET","POST"})
     */
    public function new(Request $request, FileUpLoader $fileUpLoader, UserPasswordEncoderInterface $encoder): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $password = $encoder->encodePassword($user, $user->getPassword());
            $user->setPassword($password);

            $avatarFile = $form['avatar']->getData();
            if ($avatarFile) {
                $avatarFileName = $fileUpLoader->upload($avatarFile);
                dump($avatarFileName);
                $user->setAvatar($avatarFileName);
            }

            $this->entityManager->persist($user);
            $this->entityManager->flush();
            $this->addFlash(Alert::SUCCESS,Messages::USER_SUCCESS_NEW);
            return $this->redirectToRoute('user_new');
        }

        return $this->render('user/new.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);

    }

    /**
     * A VERIFIER : Encodage
     * Cette route permet à l'administrateur de créer un nouvel utilisateur :
     * @Route("/newuser", name="user_newuser", methods={"GET","POST"} )
     */
    public function newuser(Request $request, UserPasswordEncoderInterface $encoder) :Response
    {
        $user = new User();
        $form = $this->createForm(UserAdminType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $password = $encoder->encodePassword($user, '123');
            $user->setPassword($password);

            $this->entityManager->persist($user);
            $this->entityManager->flush();

            $this->addFlash(Alert::SUCCESS,Messages::USER_SUCCESS_NEW);
            return $this->redirectToRoute('user_new');
        }

        return $this->render('user/newuser.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    public function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="user_show", methods={"GET"})
     */
    public function show(User $user): Response
    {
        return $this->render('user/show.html.twig', [
            'user' => $user,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="user_edit", methods={"GET","POST"})
     */
    public function edit(Request $request,
                         User $user,
                         FileUpLoader $fileUpLoader,
                         UserPasswordEncoderInterface $encoder): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $password = $encoder->encodePassword($user, $user->getPassword());
            $user->setPassword($password);
            $avatarFile = $form['avatar']->getData();
            if ($avatarFile) {
                $avatarFileName = $fileUpLoader->upload($avatarFile);
                $user->setAvatar($avatarFileName);
            }

            $this->entityManager->flush();
            $this->addFlash(Alert::SUCCESS,Messages::USER_SUCCESS_EDIT);
        }

        return $this->render('user/edit.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="user_delete", methods={"DELETE"})
     */
    public function delete(Request $request, User $user): Response
    {
        if ($this->isCsrfTokenValid('delete' . $user->getId(), $request->request->get('_token'))) {
            $this->entityManager->remove($user);
            $this->entityManager->flush();
            $this->addFlash(Alert::SUCCESS,Messages::USER_SUCESS_DELETE);
        }

        return $this->redirectToRoute('user_index');
    }
}
