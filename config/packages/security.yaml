security:

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER

    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        users:
            entity:
                class: App\Entity\User
                #property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            guard:
                authenticators:
                    - App\Security\AppAuthenticator
                entry_point: App\Security\AppAuthenticator

            logout:
                path: app_logout
                # where to redirect after logout
                target: index_logout

            # permet a l'utilisateur de choisir que l'on se souvienne de lui
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 600 # in seconds

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Route /ville
        # Seul l'administrateur à accès à l'écran de CRUD des villes
#        - { path: '^/ville/{id}', roles: ROLE_USER, methods: GET }
#        - { path: '^/ville/{id}', roles: ROLE_ADMIN, methods: DELETE }
#        - { path: '^/ville/{id}/modifier', roles: ROLE_ADMIN }
#        - { path: '^/ville/', roles: ROLE_USER, methods: GET }
#        - { path: '^/ville/', roles: ROLE_ADMIN, methods: POST}

        # Route /place
        # Seul l'administrateur à accès à l'écran de CRUD des lieux
#        - { path: '^/place/{id}', roles: ROLE_ADMIN, methods: DELETE }
#        - { path: '^place/{id}/edit', roles: ROLE_ADMIN }
#        - { path: '^/place/{id}', roles: ROLE_USER, methods: GET}
#        - { path: '^/place/new', roles: ROLE_USER }
#        - { path: '^/place/api', roles: ROLE_USER}
#        - { path: '^/place/', roles: ROLE_USER }

        # Route /school
        # Seul l'administrateur à accès à l'écran de CRUD des écoles
#        - { path: '^/school/{id}', roles: ROLE_ADMIN, methods: DELETE }
#        - { path: '^/school/{id}/edit', roles: ROLE_ADMIN }
#        - { path: '^/school/{id}', roles: ROLE_USER, methods: GET }
#        - { path: '^/school/', roles: ROLE_ADMIN, methods: POST }
#        - { path: '^/school/', roles: ROLE_USER, methods: GET }

        # Route /sortie
        # Les utilisateurs ont accès à l'écran de CRUD des sorties
#        - { path: '^/sortie/{page}', roles: ROLE_ADMIN, methods: POST }
#        - { path: '^/sortie/{page}', roles: ROLE_USER, methods: GET }
#        - { path: '^/sortie/creer', roles: ROLE_USER }
#        - { path: '^/sortie/show/{id}', roles: ROLE_USER }
#        - { path: '^/sortie/{id}/edit', roles: ROLE_USER }
#        - { path: '^/sortie/{id}', roles: ROLE_USER }
#        - { path: '^/sortie/cancel/{id}', roles: ROLE_USER }
#        - { path: '^/sortie/inscription/{id}', roles: ROLE_USER }
#        - { path: '^/sortie/desinscrire/{id}', roles: ROLE_USER }
#        - { path: '^/sortie/publish/{id}', roles: ROLE_USER }

        # Modèle
        # - { path: '^/admin', roles: ROLE_USER_METHOD, methods: [POST, PUT] }
